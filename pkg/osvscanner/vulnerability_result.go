package osvscanner

import (
	"log"

	"github.com/google/osv-scanner/internal/osv"
	"github.com/google/osv-scanner/pkg/config"
	"github.com/google/osv-scanner/pkg/models"
)

func groupResponse(query osv.BatchedQuery, resp *osv.HydratedBatchedResponse, configManager *config.ConfigManager) models.VulnerabilityResults {
	output := models.VulnerabilityResults{
		Results: []models.SourceResults{},
	}
	groupedBySource := map[osv.Source][]models.Package{}

	for i, query := range query.Queries {
		response := resp.Results[i]
		if len(response.Vulns) == 0 {
			continue
		}
		var pkg models.Package
		if query.Commit != "" {
			pkg.Version = query.Commit
			pkg.Ecosystem = "GIT"
		} else if query.Package.PURL != "" {
			var err error
			pkg, err = PURLToPackage(query.Package.PURL)
			if err != nil {
				log.Printf("Failed to parse purl: %s, with error: %s",
					query.Package.PURL, err)
				continue
			}
			pkg.Vulnerabilities = response.Vulns
		} else {
			pkg = models.Package{
				Name:            query.Package.Name,
				Version:         query.Version,
				Ecosystem:       query.Package.Ecosystem,
				Vulnerabilities: response.Vulns,
			}
		}

		groupedBySource[query.Source] = append(groupedBySource[query.Source], pkg)
	}

	for source, packages := range groupedBySource {
		output.Results = append(output.Results, models.SourceResults{
			PackageSource: source,
			Packages:      packages,
		})
	}

	return output
}
